{"version":3,"sources":["contexts/BookContext.js","components/Navbar.js","components/BookDetails.js","components/BookList.js","components/BookForm.js","App.js","serviceWorker.js","index.js"],"names":["BookContext","createContext","BookContextProvider","props","useState","localData","localStorage","getItem","JSON","parse","books","setBooks","useEffect","setItem","stringify","Provider","value","addBook","title","author","id","uuid","removeBook","filter","book","children","Navbar","useContext","className","length","BookDetails","onClick","BookList","map","key","BookForm","setTitle","setAuthor","onSubmit","e","preventDefault","type","placeholder","onChange","target","required","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2MAGaA,EAAcC,0BA6BZC,EA3Ba,SAACC,GAEzB,IAFmC,EAObC,oBALD,WACnB,IAAMC,EAAYC,aAAaC,QAAQ,SACvC,OAAOF,EAAYG,KAAKC,MAAMJ,GAAa,MAJV,mBAOhCK,EAPgC,KAOzBC,EAPyB,KAkBnC,OAHJC,qBAAU,WACNN,aAAaO,QAAQ,QAASL,KAAKM,UAAUJ,MAC9C,CAACA,IAEI,6BACI,kBAACV,EAAYe,SAAb,CAAsBC,MAAO,CAACN,QAAOO,QAZjC,SAACC,EAAOC,GACpBR,EAAS,GAAD,mBAAKD,GAAL,CAAY,CAAEQ,MAAOA,EAAOC,OAAQA,EAAQC,GAAIC,WAWFC,WATvC,SAACF,GAChBT,EAASD,EAAMa,QAAO,SAACC,GAAD,OAAUA,EAAKJ,KAAOA,SAS9BjB,EAAMsB,YCbTC,EAVA,WAAO,IACVhB,EAAUiB,qBAAW3B,GAArBU,MACR,OACI,yBAAKkB,UAAU,UACX,4CACA,iDAAuBlB,EAAMmB,OAA7B,yBCOGC,EAZK,SAAC,GAAc,IAAZN,EAAW,EAAXA,KACZF,EAAcK,qBAAW3B,GAAzBsB,WACP,OACI,6BACI,wBAAIS,QAAS,kBAAMT,EAAWE,EAAKJ,MAC/B,yBAAKQ,UAAU,SAASJ,EAAKN,OAC7B,yBAAKU,UAAU,UAAUJ,EAAKL,WCkB/Ba,EAvBE,WAAO,IACbtB,EAASiB,qBAAW3B,GAApBU,MACP,OACI,yBAAKkB,UAAU,aACTlB,EAAMmB,OACJ,6BACI,4BACMnB,EAAMuB,KAAI,SAACT,GACT,OACI,kBAAC,EAAD,CAAaU,IAAKV,EAAKJ,GAAII,KAAMA,SAOjD,yBAAKI,UAAU,SAAf,gCCcDO,EA/BE,WAAO,IACZlB,EAAYU,qBAAW3B,GAAvBiB,QADW,EAEOb,mBAAS,IAFhB,mBAEZc,EAFY,KAELkB,EAFK,OAGShC,mBAAS,IAHlB,mBAGZe,EAHY,KAGJkB,EAHI,KAUnB,OACI,6BACI,0BAAMC,SARO,SAACC,GAClBA,EAAEC,iBACFvB,EAAQC,EAAOC,GACfiB,EAAS,IACTC,EAAU,MAKF,2BACAI,KAAK,OACLC,YAAY,aACZ1B,MAAOE,EACPyB,SAAU,SAAAJ,GAAC,OAAIH,EAASG,EAAEK,OAAO5B,QACjC6B,UAAQ,IACR,2BACAJ,KAAK,OACLC,YAAY,cACZ1B,MAAOG,EACPwB,SAAU,SAAAJ,GAAC,OAAIF,EAAUE,EAAEK,OAAO5B,QAClC6B,UAAQ,IACR,2BAAOJ,KAAK,SAASzB,MAAM,gBCT5B8B,MAZf,WACE,OACE,yBAAKlB,UAAU,OACb,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCDYmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.17a619d5.chunk.js","sourcesContent":["import React, { createContext, useState, useEffect } from 'react'\nimport uuid from 'uuid/v1'\n\nexport const BookContext = createContext();\n\nconst BookContextProvider = (props) => {\n\n    const initialState = () => {\n      const localData = localStorage.getItem('books');\n      return localData ? JSON.parse(localData) : [];\n    };\n\nconst [books, setBooks] = useState(initialState)\nconst addBook = (title, author) => {\n    setBooks([...books, { title: title, author: author, id: uuid() }])\n}\nconst removeBook = (id) => {\n    setBooks(books.filter((book) => book.id !== id))\n}\n\nuseEffect(() => {\n    localStorage.setItem('books', JSON.stringify(books))\n}, [books])\n    return (\n        <div>\n            <BookContext.Provider value={{books, addBook, removeBook}}>\n                { props.children }\n            </BookContext.Provider>\n        </div>\n    )\n}\n\nexport default BookContextProvider\n","import React, { useContext } from 'react'\nimport { BookContext } from '../contexts/BookContext'\n\nconst Navbar = () => {\n    const { books } = useContext(BookContext)\n    return (\n        <div className=\"navbar\">\n            <h1>Reading List</h1>\n            <p>Currently you have {books.length} books to complete.</p>\n        </div>\n    )\n}\n\nexport default Navbar\n","import React, { useContext } from 'react'\nimport { BookContext } from '../contexts/BookContext'\n\nconst BookDetails = ({ book }) => {\n    const {removeBook} = useContext(BookContext)\n    return (\n        <div>\n            <li onClick={() => removeBook(book.id)}>\n                <div className=\"title\">{book.title}</div>\n                <div className=\"author\">{book.author}</div>\n            </li>\n        </div>\n    )\n}\n\nexport default BookDetails\n","import React, { useContext } from 'react'\nimport { BookContext } from '../contexts/BookContext'\nimport BookDetails from './BookDetails'\n\nconst BookList = () => {\n    const {books} = useContext(BookContext)\n    return (\n        <div className=\"book-list\">\n            { books.length ? (\n                <div>\n                    <ul>\n                        { books.map((book) => {\n                            return (\n                                <BookDetails key={book.id} book={book} />\n                            )\n                        })\n                    }\n                    </ul>\n                </div>\n            ) : (\n                <div className=\"empty\">No books to complete. Yay!</div>\n            )\n            }\n        </div>\n    )\n}\n\nexport default BookList\n","import React, { useContext, useState } from 'react'\nimport { BookContext } from '../contexts/BookContext'\n\nconst BookForm = () => {\n    const { addBook } = useContext(BookContext)\n    const [title, setTitle] = useState('')\n    const [author, setAuthor] = useState('')\n    const handleSubmit = (e) => {\n        e.preventDefault()\n        addBook(title, author)\n        setTitle('')\n        setAuthor('')\n    }\n    return (\n        <div>\n            <form onSubmit={handleSubmit}>\n                <input \n                type=\"text\"\n                placeholder=\"book title\"\n                value={title}\n                onChange={e => setTitle(e.target.value)}\n                required />\n                <input \n                type=\"text\"\n                placeholder=\"book author\"\n                value={author}\n                onChange={e => setAuthor(e.target.value)}\n                required />\n                <input type=\"submit\" value=\"add book\" />\n            </form>\n        </div>\n    )\n}\n\nexport default BookForm\n","import React from 'react';\nimport BookContextProvider from './contexts/BookContext';\nimport Navbar from './components/Navbar';\nimport BookList from './components/BookList';\nimport BookForm from './components/BookForm';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BookContextProvider>\n        <Navbar />\n        <BookList />\n        <BookForm />\n      </BookContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}